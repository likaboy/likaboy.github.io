<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>knife4j 4.5.0 与 SpringBoot3.4.0-4 不兼容</title>
    <link href="/2025/02/28/knife4j-4-5-0-%E4%B8%8E-SpringBoot3-4-0-4-%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
    <url>/2025/02/28/knife4j-4-5-0-%E4%B8%8E-SpringBoot3-4-0-4-%E4%B8%8D%E5%85%BC%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"> #复现下场景:<br> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> com.github.xiaoymin<br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> knife4j-openapi3-jakarta-spring-boot-starter<br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> 4.5.0 4.5.0 4.5.0<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>本来想从 SpringBoot 3.3.5 升级到最新的 3.4.4。但是升级后发现 Knife4j 文档地址doc.html进入后报错。</p><p><strong>java.lang.NoSuchMethodError: ‘void org.springframework.web.method.ControllerAdviceBean.<init>(java.lang.Object)’</strong></p><p>在全局异常解析中可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">at org.springdoc.core.service.GenericResponseService.lambda$getGenericMapResponse<span class="hljs-variable">$8</span>(GenericResponseService.java:702) ~[springdoc-openapi-starter-common-2.3.0.jar:2.3.0]<br>at java.base/java.util.stream.ReferencePipeline$2<span class="hljs-variable">$1</span>.accept(ReferencePipeline.java:178) ~[na:na]<br>at java.base/java.util.Spliterators<span class="hljs-variable">$ArraySpliterator</span>.forEachRemaining(Spliterators.java:992) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575) ~[na:na]at org.springdoc.core.service.GenericResponseService.lambda$getGenericMapResponse<span class="hljs-variable">$8</span>(GenericResponseService.java:702) ~[springdoc-openapi-starter-common-2.3.0.jar:2.3.0]at java.base/java.util.stream.ReferencePipeline$2<span class="hljs-variable">$1</span>.accept(ReferencePipeline.java:178) ~[na:na]at java.base/java.util.Spliterators<span class="hljs-variable">$ArraySpliterator</span>.forEachRemaining(Spliterators.java:992) ~[na:na]at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[na:na]at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[na:na]at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575) ~[na:na]<br><br></code></pre></td></tr></table></figure><p>GenericResponseService  在 ‘springdoc-openapi-starter-common-2.3.0.jar’ 中<br>这里可以看到是 <code>org.springdoc.core.service.GenericResponseService</code>中的 <code>getGenericMapResponse</code> 方法。然后在这里找到何处调用了 <code>ControllerAdviceBean</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, ApiResponse&gt; genericApiResponseMap = (Map)controllerAdviceInfosInThisBean.stream().map(ControllerAdviceInfo::getApiResponseMap).collect(LinkedHashMap::<span class="hljs-keyword">new</span>, Map::putAll, Map::putAll);<br> <br><span class="hljs-keyword">for</span>(ControllerAdviceInfo controllerAdviceInfo : <span class="hljs-built_in">this</span>.controllerAdviceInfos.stream().filter((controllerAdviceInfo) -&gt; (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ControllerAdviceBean</span>(controllerAdviceInfo.getControllerAdvice())).isApplicableToBeanType(beanType)).filter((controllerAdviceInfo) -&gt; !beanType.equals(controllerAdviceInfo.getControllerAdvice().getClass())).toList()) &#123;controllerAdviceInfo.getApiResponseMap().forEach((key, apiResponse) -&gt; &#123;<span class="hljs-keyword">if</span> (!genericApiResponseMap.containsKey(key)) &#123;genericApiResponseMap.put(key, apiResponse);<br>        &#125;<br> <br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到调用的 是一个参数</p><p>但是在 SpringBoot 3.4.0 ~4 中 spring-web-6.1.14.jar 的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ControllerAdviceBean</span><span class="hljs-params">(String beanName, BeanFactory beanFactory, ControllerAdvice controllerAdvice)</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-title function_">ControllerAdviceBean</span><span class="hljs-params">(String beanName, BeanFactory beanFactory, ControllerAdvice controllerAdvice)</span> &#123;<br>    Assert.hasText(beanName, <span class="hljs-string">&quot;Bean name must contain text&quot;</span>);Assert.hasText(beanName,<span class="hljs-string">&quot;Bean name must contain text&quot;</span>);<br>    Assert.notNull(beanFactory, <span class="hljs-string">&quot;BeanFactory must not be null&quot;</span>);Assert.notNull(beanFactory,<span class="hljs-string">&quot;BeanFactory must not be null&quot;</span>);<br>    Assert.isTrue(beanFactory.containsBean(beanName), () -&gt; <span class="hljs-string">&quot;BeanFactory [&quot;</span> + beanFactory +<br>            <span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    Assert.notNull(controllerAdvice, <span class="hljs-string">&quot;ControllerAdvice must not be null&quot;</span>);Assert.notNull(controllerAdvice, <span class="hljs-string">&quot;ControllerAdvice must not be null&quot;</span>);<br><br>    <span class="hljs-built_in">this</span>.beanName = beanName; <span class="hljs-built_in">this</span>.beanName = beanName;<br>    <span class="hljs-built_in">this</span>.isSingleton = beanFactory.isSingleton(beanName); <span class="hljs-built_in">this</span>.isSingleton = beanFactory.isSingleton(beanName);<br>    <span class="hljs-built_in">this</span>.beanType = getBeanType(beanName, beanFactory); <span class="hljs-built_in">this</span>.beanType = getBeanType(beanName, beanFactory);<br>    <span class="hljs-built_in">this</span>.beanTypePredicate = createBeanTypePredicate(controllerAdvice); <span class="hljs-built_in">this</span>.beanTypePredicate = createBeanTypePredicate(controllerAdvice);<br>    <span class="hljs-built_in">this</span>.beanFactory = beanFactory; <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>&#125;<br></code></pre></td></tr></table></figure><p>属实是 knif4j 没有跟上节奏</p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knife4j</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
