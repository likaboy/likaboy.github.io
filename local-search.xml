<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>人生有限公司</title>
    <link href="/2025/02/28/%E4%BA%BA%E7%94%9F%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/"/>
    <url>/2025/02/28/%E4%BA%BA%E7%94%9F%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/</url>
    
    <content type="html"><![CDATA[<p><strong>我们的「人生有限公司」是否能永久的持续下去，靠的唯有长期主义（「人生决策」系统 +「价值投资」系统）</strong></p><h3 id="什么是人生决策？"><a href="#什么是人生决策？" class="headerlink" title="什么是人生决策？"></a>什么是人生决策？</h3><p>“人生决策”可以理解为一种系统化的方法，用来指导我们在生命中的关键时刻做出选择。它类似于一个决策框架，可能包括以下几个要素：</p><ul><li>目标导向：明确你的人生目标，比如追求幸福、健康、财富、意义或影响力。</li><li>信息收集与分析：基于事实、经验和预测，评估每个选择的潜在结果。</li><li>优先级排序：根据你的核心价值观，决定哪些目标或结果更重要。</li><li>风险管理：权衡短期牺牲与长期收益，避免冲动或不可逆的错误。</li><li>反思与调整：定期回顾决策的效果，优化未来的选择。<br>比如，选择职业时，“人生决策”系统可能会让你问：这份工作是否符合我的长期兴趣？它能带来持续成长吗？它与我的价值观一致吗？这样的系统旨在让你的每一步都服务于更大的愿景，而不是被眼前的诱惑或压力牵着走。</li></ul><h3 id="什么是价值投资？"><a href="#什么是价值投资？" class="headerlink" title="什么是价值投资？"></a>什么是价值投资？</h3><p>“价值投资”原本是一个金融术语，由本杰明·格雷厄姆和沃伦·巴菲特等人推广，但在这里可以延伸到人生层面。它的核心理念是：以低于内在价值的价格买入优质资产，并长期持有，等待价值显现。</p><p>在人生语境中，“价值投资”可以指：</p><ul><li>识别“优质资产”：<ul><li>投资于那些长期有回报的事物，比如教育、健康、人际关系、技能或内在成长。</li></ul></li><li>低估时买入：<ul><li>抓住被忽视的机会，比如在别人看不到价值时坚持学习某项技能，或在市场低迷时创业。</li></ul></li><li>长期持有：<ul><li>耐心等待这些投资开花结果，而不是追求即时满足。比如，花时间建立深厚友谊，而不是只追求短期社交快感。</li></ul></li><li>避免投机：<br>-不被短期的流行趋势或浮躁的情绪驱动，而是基于理性和信念行事。</li></ul><p>例如，把时间和精力投入到学习一门外语，可能短期看不到回报，但长期来看，它可能为你打开新的职业机会或文化视野，这就是一种“价值投资”。</p><h2 id="二者如何支撑“人生有限公司”的永久持续？"><a href="#二者如何支撑“人生有限公司”的永久持续？" class="headerlink" title="二者如何支撑“人生有限公司”的永久持续？"></a>二者如何支撑“人生有限公司”的永久持续？</h2><ul><li>人生决策系统提供了方向和纪律，确保你的每一步选择都指向长期目标。它像公司的战略规划，避免资源浪费。</li><li>价值投资系统则是执行工具，帮助你分配时间、精力、金钱等“资本”，投资于高回报的领域。它像公司的财务管理，确保资产增值。</li></ul><p>结合起来，这两个系统形成了一个闭环：决策系统帮你选对方向，价值投资系统帮你积累资源。长期主义则是<strong>贯穿始终</strong>的心态，要求你抵御诱惑、坚持耐心，最终让“<strong>人生有限公司</strong>”在时间中不断增值。</p><h2 id="现实中的可持续性"><a href="#现实中的可持续性" class="headerlink" title="现实中的可持续性"></a>现实中的可持续性</h2><p>不过，“永久持续”在现实中可能是个理想化的目标。人生有限，且充满不可控因素（健康、经济、社会变化等）。但通过长期主义，你可以最大化生命的质量和影响力，让“人生有限公司”在有限时间内实现最大的“股东价值”——这里的股东是你自己和你珍视的人。</p>]]></content>
    
    
    <categories>
      
      <category>think</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
      <tag>think</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>knife4j 4.5.0 与 SpringBoot3.4.0-4 不兼容</title>
    <link href="/2025/02/28/knife4j-4-5-0-%E4%B8%8E-SpringBoot3-4-0-4-%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
    <url>/2025/02/28/knife4j-4-5-0-%E4%B8%8E-SpringBoot3-4-0-4-%E4%B8%8D%E5%85%BC%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"> #复现下场景:<br> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> com.github.xiaoymin<br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> knife4j-openapi3-jakarta-spring-boot-starter<br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> 4.5.0 4.5.0 4.5.0<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>本来想从 SpringBoot 3.3.5 升级到最新的 3.4.4。但是升级后发现 Knife4j 文档地址doc.html进入后报错。</p><p><strong>java.lang.NoSuchMethodError: ‘void org.springframework.web.method.ControllerAdviceBean.<init>(java.lang.Object)’</strong></p><p>在全局异常解析中可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">at org.springdoc.core.service.GenericResponseService.lambda$getGenericMapResponse<span class="hljs-variable">$8</span>(GenericResponseService.java:702) ~[springdoc-openapi-starter-common-2.3.0.jar:2.3.0]<br>at java.base/java.util.stream.ReferencePipeline$2<span class="hljs-variable">$1</span>.accept(ReferencePipeline.java:178) ~[na:na]<br>at java.base/java.util.Spliterators<span class="hljs-variable">$ArraySpliterator</span>.forEachRemaining(Spliterators.java:992) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[na:na]<br>at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575) ~[na:na]at org.springdoc.core.service.GenericResponseService.lambda$getGenericMapResponse<span class="hljs-variable">$8</span>(GenericResponseService.java:702) ~[springdoc-openapi-starter-common-2.3.0.jar:2.3.0]at java.base/java.util.stream.ReferencePipeline$2<span class="hljs-variable">$1</span>.accept(ReferencePipeline.java:178) ~[na:na]at java.base/java.util.Spliterators<span class="hljs-variable">$ArraySpliterator</span>.forEachRemaining(Spliterators.java:992) ~[na:na]at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[na:na]at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[na:na]at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575) ~[na:na]<br><br></code></pre></td></tr></table></figure><p>GenericResponseService  在 ‘springdoc-openapi-starter-common-2.3.0.jar’ 中<br>这里可以看到是 <code>org.springdoc.core.service.GenericResponseService</code>中的 <code>getGenericMapResponse</code> 方法。然后在这里找到何处调用了 <code>ControllerAdviceBean</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, ApiResponse&gt; genericApiResponseMap = (Map) controllerAdviceInfosInThisBean.stream().map(ControllerAdviceInfo::getApiResponseMap).collect(LinkedHashMap::<span class="hljs-keyword">new</span>, Map::putAll, Map::putAll);<br>        <span class="hljs-keyword">for</span> (ControllerAdviceInfo controllerAdviceInfo : <span class="hljs-built_in">this</span>.controllerAdviceInfos.stream().<br>                filter((controllerAdviceInfo) -&gt; (<span class="hljs-keyword">new</span><br>                        <span class="hljs-title class_">ControllerAdviceBean</span>(controllerAdviceInfo.getControllerAdvice())).<br>                        isApplicableToBeanType(beanType)).<br>                filter((controllerAdviceInfo) -&gt; !beanType.equals(controllerAdviceInfo.getControllerAdvice().<br>                        getClass())).<br>                toList()) &#123;<br>            controllerAdviceInfo.getApiResponseMap().forEach((key, apiResponse) -&gt; &#123;<br>                <span class="hljs-keyword">if</span> (!genericApiResponseMap.containsKey(key)) &#123;<br>                    genericApiResponseMap.put(key, apiResponse);<br>                &#125;<br>            &#125;);<br>        &#125;<br></code></pre></td></tr></table></figure><p>这里可以看到调用的 是一个参数</p><p>但是在 SpringBoot 3.4.0 ~4 中 spring-web-6.1.14.jar 的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ControllerAdviceBean</span><span class="hljs-params">(String beanName, BeanFactory beanFactory, ControllerAdvice controllerAdvice)</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-title function_">ControllerAdviceBean</span><span class="hljs-params">(String beanName, BeanFactory beanFactory, ControllerAdvice controllerAdvice)</span> &#123;<br>    Assert.hasText(beanName, <span class="hljs-string">&quot;Bean name must contain text&quot;</span>);Assert.hasText(beanName,<span class="hljs-string">&quot;Bean name must contain text&quot;</span>);<br>    Assert.notNull(beanFactory, <span class="hljs-string">&quot;BeanFactory must not be null&quot;</span>);Assert.notNull(beanFactory,<span class="hljs-string">&quot;BeanFactory must not be null&quot;</span>);<br>    Assert.isTrue(beanFactory.containsBean(beanName), () -&gt; <span class="hljs-string">&quot;BeanFactory [&quot;</span> + beanFactory +<br>            <span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<span class="hljs-string">&quot;] does not contain specified controller advice bean&#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    Assert.notNull(controllerAdvice, <span class="hljs-string">&quot;ControllerAdvice must not be null&quot;</span>);Assert.notNull(controllerAdvice, <span class="hljs-string">&quot;ControllerAdvice must not be null&quot;</span>);<br><br>    <span class="hljs-built_in">this</span>.beanName = beanName; <span class="hljs-built_in">this</span>.beanName = beanName;<br>    <span class="hljs-built_in">this</span>.isSingleton = beanFactory.isSingleton(beanName); <span class="hljs-built_in">this</span>.isSingleton = beanFactory.isSingleton(beanName);<br>    <span class="hljs-built_in">this</span>.beanType = getBeanType(beanName, beanFactory); <span class="hljs-built_in">this</span>.beanType = getBeanType(beanName, beanFactory);<br>    <span class="hljs-built_in">this</span>.beanTypePredicate = createBeanTypePredicate(controllerAdvice); <span class="hljs-built_in">this</span>.beanTypePredicate = createBeanTypePredicate(controllerAdvice);<br>    <span class="hljs-built_in">this</span>.beanFactory = beanFactory; <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>&#125;<br></code></pre></td></tr></table></figure><p>属实是 knif4j 没有跟上节奏</p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>knife4j</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
